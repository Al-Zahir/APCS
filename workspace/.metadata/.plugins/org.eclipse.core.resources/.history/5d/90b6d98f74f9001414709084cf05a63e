import java.util.ArrayList;

public class Board {
	private Piece[][] board;
	private Team turn;

	public Board(int rows, int cols) {
		board = new Piece[rows][cols];
	}

	public void nextTurn() {
		if (turn == Team.WHITE)
			turn = Team.BLACK;
		else
			turn = Team.WHITE;
	}

	public void select() {

	}

	public void setLocations() {
		for (int r = 0; r < board.length; r++) {
			for (int c = 0; c < board[r].length; c++) {
				Piece p = board[r][c];

				if (p.getType() != Type.BLANK)
					setPieceLocation(p, r, c);
			}
		}
	}

	public void setPieceLocation(Piece p, int r, int c) {
		switch (p.getType()) {
		case PAWN:
			if (p.getColor() == Team.WHITE) {
				p.addMoveLoc(new Location(r + 1, c));

				if (!p.hasMoved())
					p.addMoveLoc(new Location(r + 2, c));

				if (c + 1 < board.length)
					if (board[r + 1][c + 1].getColor() == Team.BLACK)
						p.addMoveLoc(new Location(r + 1, c + 1));

				if (c - 1 > 0)
					if (board[r + 1][c - 1].getColor() == Team.BLACK)
						p.addMoveLoc(new Location(r + 1, c - 1));
			} else {
				p.addMoveLoc(new Location(r - 1, c));

				if (!p.hasMoved())
					p.addMoveLoc(new Location(r - 2, c));

				if (c + 1 < board.length)
					if (board[r - 1][c + 1].getColor() == Team.WHITE)
						p.addMoveLoc(new Location(r - 1, c + 1));

				if (c - 1 > 0)
					if (board[r - 1][c - 1].getColor() == Team.WHITE)
						p.addMoveLoc(new Location(r - 1, c - 1));
			}
			break;

		case KNIGHT:

			break;

		case BISHOP:
			int tempR = r + 1, tempC = c + 1;
			while(tempR < board.length && tempC < board[tempR].length && 
					board[tempR][tempC].getType() == Type.BLANK){
				p.addMoveLoc(new Location(tempR, tempC));
				tempR++;
				tempC++;
			}
			
			tempR = r - 1;
			tempC = c + 1;
			while(tempR >= 0 && tempC < board[tempR].length && 
					board[tempR][tempC].getType() == Type.BLANK){
				p.addMoveLoc(new Location(tempR, tempC));
				tempR--;
				tempC++;
			}
			
			tempR = r + 1;
			tempC = c - 1;
			while(tempR < board.length && tempC >= 0 && 
					board[tempR][tempC].getType() == Type.BLANK){
				p.addMoveLoc(new Location(tempR, tempC));
				tempR++;
				tempC--;
			}
			
			tempR = r - 1;
			tempC = c - 1;
			while(tempR >= 0 && tempC >= 0 && 
					board[tempR][tempC].getType() == Type.BLANK){
				p.addMoveLoc(new Location(tempR, tempC));
				tempR--;
				tempC--;
			}
			
			break;

		case ROOK:

			break;

		case QUEEN:

			break;

		case KING:

			break;
		}
	}
	
	public ArrayList<Location> pawnLoc(){
		ArrayList<Location> loc = new ArrayList<Location>();
		
		
		return loc;
	}
	
	public ArrayList<Location> knightLoc(){
		ArrayList<Location> loc = new ArrayList<Location>();
		
		
		return loc;
	}
	
	public ArrayList<Location> bishopLoc(){
		ArrayList<Location> loc = new ArrayList<Location>();
		
		
		return loc;
	}
	
	public ArrayList<Location> rookLoc(){
		ArrayList<Location> loc = new ArrayList<Location>();
		
		
		return loc;
	}
	
	public ArrayList<Location> kingLoc(){
		ArrayList<Location> loc = new ArrayList<Location>();
		
		
		return loc;
	}
}
