package com.Zeditude.APCompFinal;
import java.util.ArrayList;

public class Piece implements Cloneable{
	private Type type;
	private ArrayList<Location> moveLoc;
	private Team color;
	private boolean isSelected;
	private boolean hasMoved;
	private boolean isProtected;
	private ArrayList<Piece> protectedPieces;

	public Piece() {
		type = Type.BLANK;
		color = Team.BLANK;
		isSelected = false;
		moveLoc = new ArrayList<Location>();
		hasMoved = false;
		isProtected = false;
		protectedPieces = new ArrayList<Piece>();
	}

	public Piece(Type t, Team c) {
		type = t;
		color = c;
		moveLoc = new ArrayList<Location>();
		isSelected = false;
		hasMoved = false;
		isProtected = false;
		protectedPieces = new ArrayList<Piece>();
	}
	
	public Piece(Piece p){
		type = p.getType();
		color = p.getColor();
		moveLoc = p.getMoveLoc();
		isSelected = p.isSelected();
		hasMoved = p.hasMoved();
		
		Team opColor = Team.BLACK;
		
		if(color == Team.BLACK)
			opColor = Team.WHITE;
		
		if(p.isProtected(color) || p.isProtected(opColor))
			isProtected = true;
		else
			isProtected = false;
		
		protectedPieces = p.getProtectedPieces();
	}

	public Type getType() {
		return type;
	}

	public void setType(Type type) {
		this.type = type;
	}

	public ArrayList<Location> getMoveLoc() {
		return moveLoc;
	}

	public void addMoveLoc(Location moveLoc) {
		this.moveLoc.add(moveLoc);
	}
	
	public boolean canMoveTo(int r, int c){
		boolean flag = false;
		
		for(Location l : moveLoc)
			if(l.getRow() == r && l.getCol() == c)
				flag = true;
		
		return flag;
	}

	public Team getColor() {
		return color;
	}

	public void setColor(Team color) {
		this.color = color;
	}

	public boolean isSelected() {
		return isSelected;
	}

	public void setSelected(boolean b) {
		isSelected = b;
	}

	public boolean hasMoved() {
		return hasMoved;
	}

	public void setHasMoved(boolean hasMoved) {
		this.hasMoved = hasMoved;
	}
	
	public boolean isProtected(Team c){
		boolean flag = false;
		
		for(Piece p : protectedPieces)
			if(p.getColor() == c)
				flag = true;
		
		return isProtected && flag;
	}
	
	public boolean isProtected(Type c){
		boolean flag = false;
		
		for(Piece p : protectedPieces)
			if(p.getType() == c)
				flag = true;
		
		return isProtected && flag;
	}
	
	public void setProtected(boolean b, Piece p){
		isProtected = b;
		protectedPieces.add(p);
		
		if(!b)
			protectedPieces = new ArrayList<Piece>();
	}
	
	public ArrayList<Piece> getProtectedColors(){
		return protectedPieces;
	}
	
	public void removeLocations(){
		moveLoc = new ArrayList<Location>();
	}
	
	public String toString(){
		return color + " " + type;
	}
}
